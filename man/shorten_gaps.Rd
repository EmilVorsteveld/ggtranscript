% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/shorten_gaps.R
\name{shorten_gaps}
\alias{shorten_gaps}
\title{Improve transcript structure visualization by shortening gaps}
\usage{
shorten_gaps(exons, introns, group_var = NULL, target_gap_width = 100L)
}
\arguments{
\item{exons}{\code{data.frame()} contains exons which can originate from multiple
transcripts differentiated by \code{group_var}.}

\item{introns}{\code{data.frame()} the intron co-ordinates corresponding to the
input \code{exons}. This can be created by applying \code{to_intron()} to the
\code{exons}. If a user is not using \code{to_intron()}, they must make sure intron
start/ends are defined precisely as the adjacent exon boundaries (rather
than exon end + 1 and exon start - 1).}

\item{group_var}{\code{character()} if input data originates from more than 1
transcript, \code{group_var} must specify the column that differentiates
transcripts (e.g. "transcript_id").}

\item{target_gap_width}{\code{integer()} the width in base pairs to shorten the
gaps to.}
}
\value{
\code{data.frame()} contains the re-scaled co-ordinates of \code{introns} and
\code{exons} of each input transcript with shortened gaps.
}
\description{
For a given set of exons and introns, \code{shorten_gaps()} reduces the width of
gaps (regions that do not overlap any \code{exons}) to a user-inputted
\code{target_gap_width}. This can be useful when visualizing transcripts that have
long introns, to hone in on the regions of interest (i.e. exons) and better
compare between transcript structures.
}
\details{
After \code{shorten_gaps()} reduces the size of gaps, it will re-scale \code{exons} and
\code{introns} to preserve exon alignment. This process will only reduce the width
of input \code{introns}, never \code{exons}. Importantly, the outputted re-scaled
co-ordinates should only be used for visualization as they will not match the
original genomic coordinates.
}
\examples{

library(magrittr)

gba_ens_105_exons <- gba_ens_105 \%>\%
    dplyr::filter(type == "exon")

# first, let's use an example of a single transcript
single_tx <- gba_ens_105_exons \%>\%
    dplyr::filter(transcript_name \%in\% c("GBA-203"))

single_tx

single_tx_rescaled <- shorten_gaps(
    single_tx,
    to_intron(single_tx),
    group_var = NULL,
    target_gap_width = 100L
)

# rescaled output contains both introns and exons
single_tx_rescaled

# create function to compare transcript visualisation
# before and after shortening gaps
plot_before_after <- function(before_shorten_gaps,
                              after_shorten_gaps,
                              group_var) {
    before_plot <- before_shorten_gaps \%>\%
        ggplot2::ggplot(ggplot2::aes_string(
            xstart = "start",
            xend = "end",
            y = group_var
        )) +
        geom_range() +
        geom_intron(
            data = to_intron(before_shorten_gaps, group_var),
            strand = "-",
            arrow.min.intron.length = 500
        )

    after_plot <- after_shorten_gaps \%>\%
        dplyr::filter(type == "exon") \%>\%
        ggplot2::ggplot(ggplot2::aes_string(
            xstart = "start",
            xend = "end",
            y = group_var
        )) +
        geom_range() +
        geom_intron(
            data = after_shorten_gaps \%>\%
                dplyr::filter(type == "intron"),
            strand = "-",
            arrow.min.intron.length = 200
        )

    before_after_plotlist <- list(before_plot, after_plot)

    before_after_plot <- ggpubr::ggarrange(
        plotlist = before_after_plotlist,
        nrow = 2,
        labels = c("Before shorten_gaps()", "After shorten_gaps()")
    )

    return(before_after_plot)
}

plot_before_after(
    before_shorten_gaps = single_tx,
    after_shorten_gaps = single_tx_rescaled,
    group_var = "transcript_name"
)

# exons can also contain multiple transcripts
multi_tx <- gba_ens_105_exons \%>\%
    dplyr::filter(
        transcript_name \%in\% paste0("GBA-20", 2:8)
    )

multi_tx_rescaled <- shorten_gaps(
    multi_tx,
    to_intron(multi_tx, "transcript_name"),
    group_var = "transcript_name",
    target_gap_width = 100L
)

plot_before_after(
    before_shorten_gaps = multi_tx,
    after_shorten_gaps = multi_tx_rescaled,
    group_var = "transcript_name"
)
}
