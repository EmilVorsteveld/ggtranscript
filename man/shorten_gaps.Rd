% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/shorten_gaps.R
\name{shorten_gaps}
\alias{shorten_gaps}
\title{Improve transcript structure visualisation by shortening intron gaps}
\usage{
shorten_gaps(exons, introns, group_var = NULL, target_gap_width = 100L)
}
\arguments{
\item{exons}{\code{data.frame} containing exonic ranges, which can contain data
from from multiple transcripts.}

\item{introns}{\code{data.frame} containing the corresponding introns to \code{exons}.
This can be created by applying \code{to_intron()} to the \code{exons}. If not using
\code{to_intron()}, make sure intron start/end are defined as those precisely
matching the adjacent exon boundaries, rather than exon end + 1 and exon
start - 1.}

\item{group_var}{\code{character} if input \code{data.frame} contains more than 1
transcript, \code{group_var} should specify the column that differentiates
transcripts (e.g. "transcript_id").}

\item{target_gap_width}{\code{integer} specifying the size in base pairs to
shorten the gaps to.}
}
\value{
a \code{data.frame} that contains the co-ordinates of introns (with
shortened gaps) and exons of each input transcript, rescaled to keep exons
aligned.
}
\description{
\code{shorten_gaps} is a helper function intended to improve visualizaing
transcript structure when a transcript has long introns. \code{shorten_gaps} does
this by shortening gaps (regions that do not overlap any \code{exons}) to a
user-inputted \code{target_gap_width}, then rescaling \code{introns} and \code{exons} to
preserve exon alignment. \code{shorten_gaps} will never modify the size of input
\code{exons}. Importantly, the outputted rescaled co-ordinates should only be used
for visualization as they will not match the original genomic coordinates.
}
\examples{

library(magrittr)

gba_ens_105_exons <- gba_ens_105 \%>\%
    dplyr::filter(type == "exon")

# first, let's use an example of a single transcript
single_tx <- gba_ens_105_exons \%>\%
    dplyr::filter(transcript_name \%in\% c("GBA-203"))

single_tx

single_tx_rescaled <- shorten_gaps(
    single_tx,
    to_intron(single_tx),
    group_var = NULL,
    target_gap_width = 100L
)

# rescaled output contains both introns and exons
single_tx_rescaled

# create function to compare transcript visualisation
# before and after shortening gaps
plot_before_after <- function(before_shorten_gaps,
                              after_shorten_gaps,
                              group_var) {
    before_plot <- before_shorten_gaps \%>\%
        ggplot2::ggplot(ggplot2::aes_string(
            xstart = "start",
            xend = "end",
            y = group_var
        )) +
        geom_range() +
        geom_intron(
            data = to_intron(before_shorten_gaps, group_var),
            strand = "-",
            arrow.min.intron.length = 500
        )

    after_plot <- after_shorten_gaps \%>\%
        dplyr::filter(type == "exon") \%>\%
        ggplot2::ggplot(ggplot2::aes_string(
            xstart = "start",
            xend = "end",
            y = group_var
        )) +
        geom_range() +
        geom_intron(
            data = after_shorten_gaps \%>\%
                dplyr::filter(type == "intron"),
            strand = "-",
            arrow.min.intron.length = 200
        )

    before_after_plotlist <- list(before_plot, after_plot)

    before_after_plot <- ggpubr::ggarrange(
        plotlist = before_after_plotlist,
        nrow = 2,
        labels = c("Before shorten_gaps()", "After shorten_gaps()")
    )

    return(before_after_plot)
}

plot_before_after(
    before_shorten_gaps = single_tx,
    after_shorten_gaps = single_tx_rescaled,
    group_var = "transcript_name"
)

# exons can also contain multiple transcripts
multi_tx <- gba_ens_105_exons \%>\%
    dplyr::filter(
        transcript_name \%in\% paste0("GBA-20", 2:8)
    )

multi_tx_rescaled <- shorten_gaps(
    multi_tx,
    to_intron(multi_tx, "transcript_name"),
    group_var = "transcript_name",
    target_gap_width = 100L
)

plot_before_after(
    before_shorten_gaps = multi_tx,
    after_shorten_gaps = multi_tx_rescaled,
    group_var = "transcript_name"
)
}
