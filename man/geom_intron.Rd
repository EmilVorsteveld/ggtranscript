% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geom_intron.R
\name{geom_intron}
\alias{geom_intron}
\title{Plot intron lines with strand arrows}
\usage{
geom_intron(
  mapping = NULL,
  data = NULL,
  stat = "identity",
  position = "identity",
  ...,
  arrow = grid::arrow(ends = "last", length = grid::unit(0.1, "inches")),
  arrow.fill = NULL,
  lineend = "butt",
  linejoin = "round",
  na.rm = FALSE,
  arrow.min.intron.length = 0,
  show.legend = NA,
  inherit.aes = TRUE
)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link[ggplot2:aes]{aes()}} or
\code{\link[ggplot2:aes_]{aes_()}}. If specified and \code{inherit.aes = TRUE} (the
default), it is combined with the default mapping at the top level of the
plot. You must supply \code{mapping} if there is no plot mapping.}

\item{data}{The data to be displayed in this layer. There are three
options:

If \code{NULL}, the default, the data is inherited from the plot
data as specified in the call to \code{\link[ggplot2:ggplot]{ggplot()}}.

A \code{data.frame}, or other object, will override the plot
data. All objects will be fortified to produce a data frame. See
\code{\link[ggplot2:fortify]{fortify()}} for which variables will be created.

A \code{function} will be called with a single argument,
the plot data. The return value must be a \code{data.frame}, and
will be used as the layer data. A \code{function} can be created
from a \code{formula} (e.g. \code{~ head(.x, 10)}).}

\item{stat}{The statistical transformation to use on the data for this
layer, as a string.}

\item{position}{Position adjustment, either as a string, or the result of
a call to a position adjustment function.}

\item{...}{Other arguments passed on to \code{\link[ggplot2:layer]{layer()}}. These are
often aesthetics, used to set an aesthetic to a fixed value, like
\code{colour = "red"} or \code{size = 3}. They may also be parameters
to the paired geom/stat.}

\item{arrow}{specification for arrow heads, as created by arrow().}

\item{arrow.fill}{fill colour to use for the arrow head (if closed). \code{NULL}
means use \code{colour} aesthetic.}

\item{lineend}{Line end style (round, butt, square).}

\item{linejoin}{Line join style (round, mitre, bevel).}

\item{na.rm}{If \code{FALSE}, the default, missing values are removed with
a warning. If \code{TRUE}, missing values are silently removed.}

\item{arrow.min.intron.length}{\code{integer()} the minimum required width of an
intron for a strand arrow to be drawn. This can be useful to remove strand
arrows on short introns that overlap adjacent exons.}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped.
\code{FALSE} never includes, and \code{TRUE} always includes.
It can also be a named logical vector to finely select the aesthetics to
display.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics,
rather than combining with them. This is most useful for helper functions
that define both data and aesthetics and shouldn't inherit behaviour from
the default plot specification, e.g. \code{\link[ggplot2:borders]{borders()}}.}
}
\value{
the return value of a \verb{geom_*} function is not intended to be
directly handled by users. Therefore, \verb{geom_*} functions should never be
executed in isolation, rather used in combination with a
\code{ggplot2::ggplot()} call.
}
\description{
\code{geom_intron()} draws horizontal lines with central arrows that are designed
to represent introns. In combination with \code{geom_range()}/\code{geom_half_range()},
these geoms form the core components for visualizing transcript structures.
}
\details{
\code{geom_intron()} requires the following \code{aes()}; \code{xstart}, \code{xend} and \code{y}
(e.g. transcript name). If users do not have intron co-ordinates, these can
be generated from the corresponding exons using \code{to_intron()}. The \code{strand}
option (one of "+" or "-") adjusts the arrow direction to match the direction
of transcription. The \code{arrow.min.intron.length} parameter can be useful to
remove strand arrows that overlap exons, which can be a problem if plotted
introns include those that are relatively short.
}
\examples{

library(magrittr)
library(ggplot2)

# to illustrate the package's functionality
# ggtranscript includes example transcript annotation
pknox1_annotation \%>\% head()

# extract exons
pknox1_exons <- pknox1_annotation \%>\% dplyr::filter(type == "exon")
pknox1_exons \%>\% head()

# to_intron() is a helper function included in ggtranscript
# which is useful for converting exon co-ordinates to introns
pknox1_introns <- pknox1_exons \%>\% to_intron(group_var = "transcript_name")
pknox1_introns \%>\% head()

base <- pknox1_introns \%>\%
    ggplot(aes(
        xstart = start,
        xend = end,
        y = transcript_name
    ))

# by default, geom_intron() assumes introns originate from the "+" strand
base + geom_intron()

# however this can be modified using the strand option
base + geom_intron(strand = "-")

# strand can also be set as an aes()
base + geom_intron(aes(strand = strand))

# as a ggplot2 extension, ggtranscript geoms inherit the
# the functionality from the parameters and aesthetics in ggplot2
base + geom_intron(
    aes(colour = transcript_name),
    size = 1
)

# together, geom_range() and geom_intron() are designed to visualize
# the core components of transcript annotation
pknox1_exons \%>\%
    ggplot(aes(
        xstart = start,
        xend = end,
        y = transcript_name
    )) +
    geom_range() +
    geom_intron(
        data = pknox1_introns
    )

# for short introns, sometimes strand arrows will overlap exons
# to avoid this, users can set the arrow.min.intron.length parameter
pknox1_exons \%>\%
    ggplot(aes(
        xstart = start,
        xend = end,
        y = transcript_name
    )) +
    geom_range() +
    geom_intron(
        data = pknox1_introns,
        arrow.min.intron.length = 3500
    )
}
